D-требования
1. Введение
    1.1. Цель
        Этот документ описывает детальные требования к разработчику разрабатываемого ПО SNTUtilsBills. 
        Данный проект является исключительно проектом для обучения некоторым аспектам проектирования и разработки в рамках Python и ООП
    1.2. Данный документ охватывает требования к версии 0.0.1 ПО SNTUtilsBills
    1.3. Определения, термины, сокращения
        1.3.1. SNTUtilsBills - разрабатываемый программный продукт
        1.3.2. СНТ - Садовое Некоммерческие Товарищество
        1.3.3. Коммунальный платеж (коммунальный взнос) - платеж оплачиваемый по тарифам и показаниям счетчиков
        1.3.4. Некоммунальный платеж (некоммунальный взнос) - любой платеж отличный от коммунального
        1.3.5. Целевой взнос - взнос в СНТ на реализацию его правлением одной цели, например, засыпка дорог гравием
        1.3.6. Нецелевые взносы - регулярные взносы в кассу СНТ, например, членский взнос.
        1.3.7. Текст ответа руководству СНТ - текст описывающий список платежей, показаний счетчика и пр., предоставляемый руководству с целью отчета о совершенных платежах
        1.3.8. Платежное поручение  документ из банка подтверждающий факт платежа.
        1.3.9. Текст переписки с руководством СНТ - переписка с руководством СНТ в виде изображения (скриншота)
        [Наполняется по мере заполнения документа]
    1.4. Ссылки
        1.4.1. https://standards.rest/ - Спецификация REST-API
        [Наполняется по мере заполнения документа]    
2. Требования к интерфейсам
    2.1. Пользвательский интерфейс
        2.1.1. Пользвательский интерыейс должен соответствовать спецификации REST-API (см. 1.4.1.)
        2.1.2. Все запросы пользователя должны отбрабатываться только для авторизованного пользователя. Если пользователь не авторизован, должен риходить ответ 401
        2.1.3. Время жизни сессии авторизации не должно превышать 10 мин.
        2.1.4. Варианты использования "Получить последнюю запись" и "Получить статистику за период" - GET-запросы
        2.1.5. Варианты использования "Запланировать оплату", "Внести показания счетчика", "Зафиксироать факт оплаты", "Прикрепить переписку с руководством СНТ", "Добавить целевой взнос", "Добавить нецелевой взнос", "Авторизация" - POST-запросы
        2.1.6. Вариант использования "Установить тариф" - PUT-запрос
        2.1.7. Тело запросов и ответ на запрос должны быть в виде JSON с максимально плоской структурой
    2.2. Програмные интерфейсы
        2.2.1. В качестве базы данных должна использоваться БД SQLite, однако реализация должна иметь возможность изменить ее на другую реляционную БД.
3. Детальные требования
    3.1. Описание последовательностей
        3.1.1. Варианты использования "Внести показания счетчика", "Запланировать оплату", "Зафиксироать факт оплаты", "Прикрепить переписку с руководством СНТ", "Получить последнюю запись", "Добавить целевой взнос", "Добавить нецелевой взнос", "Получить статистику за период"
        Для этих вариантов необходимы следуюшие классы: User, Payment, PaymentCollection, PaymentRecord, DBConnection
            @startuml
            actor Actor as userActor
            userActor -> User : Авторизация
            User -> PaymentCollection : Создать
            PaymentCollection -> PaymentRecord : Создать
            PaymentRecord -> Payment : Создать
            Payment -> DBConnection : Создать
            database Database as DB
            DBConnection ->  DB : Запрос
            DB --> DBConnection : Вернуть данные
            DBConnection --> Payment : Вернуть
            Payment --> PaymentRecord : Вернуть
            PaymentRecord --> PaymentCollection : Вернуть
            PaymentCollection --> User : Вернуть
            User --> userActor : : Вернуть
            @enduml
        3.1.2. Вариант использования"Установить тариф".
        Для этого варианта необходимы следующие классы: User, DBConnection
            @startUml
            actor Actor as userActor
            userActor -> User : Авторизация
            User -> DBConnection : Создать
            database Database as DB
            DBConnection ->  DB : Запрос
            DB --> DBConnection : Вернуть данные
            DBConnection --> User : Вернуть
            User --> userActor : : Вернуть
            @endUml
    3.2. Классы для классификации детальных требований
        3.2.1. User
        Класс пользователя. Требуется для логики авторизации.
        3.2.2. PaymentRecord
        Класс описывающий одну платежную запись.
            3.2.2.1 Атрибуты
            Дата создания записи в БД, дата планирования платежа, дата фиксации платежа, Платежы (класс Payment), ссылка на прикрепленную переписку, ссылка на прикрепленную платежку, ответ руководству СНТ, задолженность.
        3.2.3. PaymentCollection
        Класс описывающий коллекцию платежных записей
            3.2.3.1 Атрибуты
            Объекты класса PaymentRecord
        3.2.4 Payment
        Класс описывающий один платеж, является классом родителем для классов ComunalPayment, TargetPayment и NonTargetPayment
        3.2.5 ComunalPayment
        Класс описывающий комунальные платежи
            3.2.5.1 Атрибуты
            Текущие показания счетчика, сумма платежа, предыдущие показания счетчика, тариф, признак оплаты (оплачены, неоплачены), долг

        DBConnection
